-- Pull in the wezterm API --
local wezterm = require 'wezterm'

-- This table will hold the configuration. --
local config = {}

-- In newer versions of wezterm, use the config_builder which will
-- help provide clearer error messages --
if wezterm.config_builder then
  config = wezterm.config_builder()
end

-- This is where you actually apply your config choices --

-- For example, changing the color scheme: --
config.color_scheme = 'Catppuccin Mocha'

config.colors = {
  background = '#13131e',
}

config.inactive_pane_hsb = {
  saturation = 0.4,
  brightness = 0.7,
}

-- size --
config.initial_rows = 46
config.initial_cols = 235

-- Fonts --
-- local font = 'FantasqueSansM Nerd Font Mono'
-- local font = 'ProFontWindows Nerd Font Mono'
-- local font = 'SpaceMono Nerd Font Mono'
local font = 'IosevkaTerm Nerd Font Mono'
config.font = wezterm.font(font, { weight = 'Medium' })
config.font_size = 26
config.cell_width = 1.05

-- Tab bar --
config.window_frame = {
  font = wezterm.font(font, { weight = 'ExtraBold' }),
  font_size = 16,
}
config.tab_max_width = 35

local function tab_title(tab_info, showTabId)
  local title = tab_info.tab_title
  -- if the tab title is explicitly set, take that
  if title and #title > 0 then
    return title .. 'hi?'
  end
  -- Otherwise, use the title from the active pane
  -- in that tab

  local HOME_DIR = string.format('file://%s', os.getenv('HOME'))
  -- return current_dir == HOME_DIR and "." or string.gsub(current_dir, "(.*[/\\])(.*)", "%2")
  local activePane = tab_info.active_pane
  local currentDir = ('~' .. activePane.current_working_dir:gsub(HOME_DIR, '')):gsub('~file://', '')
  -- latest two versions say you should be able to use get_current_working_dir() but it isn't working? and old way isn't working either. 13 July 2023 is last known good version
  -- local currentWorkingDir = activePane:get_current_working_dir()
  -- local currentDir = currentWorkingDir.path
  -- too much in tab, get rid of active process
  -- local activeProcess = string.gsub(activePane.foreground_process_name, '(.*[/\\])(.*)', '%2')
  local tabIndex = tab_info.tab_index
  local tabId = (tabIndex < 8 and showTabId) and tabIndex + 1 or ''
  -- local dirString = tabId .. (currentDir .. ' üñ•Ô∏è ' .. activeProcess .. ' ')
  local dirString = ' üìÅ' .. (currentDir .. ' ') .. tabId

  -- if (string.find(tab_info.tab_name, 'wezterm Configuration Error') ~= nil) then
  --   return tab_info.tab_name
  -- end

  -- return (activeProcess and #activeProcess > 0) and dirString
  return dirString .. ' end return'
end

wezterm.on('format-tab-title', function(tab, tabs, panes, config, hover, max_width)
  -- local title = string.format(" %s  %s ~ %s  ", "‚ùØ", tab_title(tab))
  -- right align tab text so if it gets too big, left gets truncated
  -- local title = wezterm.truncate_left(tab_title(tab, true), max_width)
  local title = tab_title(tab, true)

  if (tab.is_active) then
    return {
      { Background = { Color = '#7ca6fb' } },
      { Foreground = { Color = '#111126' } },
      { Text = title .. ' active' },
    }
  end

  return {
    { Background = { Color = '#222222' } },
    { Foreground = { Color = '#eeeeee' } },
    { Text = title .. 'inactive' },
  }
end)

wezterm.on('format-window-title', function(tab, pane, tabs, panes, config)
  local title = tab_title(tab, false)

  local index = ''
  if #tabs > 1 then
    index = string.format('%d/%d', tab.tab_index + 1, #tabs)
  end

  return index .. title .. 'üñ•Ô∏è wezterm'
end)

local act = wezterm.action

-- mouse actions --
config.mouse_bindings = {
    -- Change the default click behaviour so that it only selects
    -- text and doesn't open hyperlinks
    {
        event = { Up = { streak = 1, button = "Left" } },
        mods = "NONE",
        action = act.CompleteSelection 'ClipboardAndPrimarySelection'
    },

    -- and make ALT-Click open hyperlinks
    {
        event = { Up = { streak = 1, button = "Left" } },
        mods = "ALT",
        action = act.OpenLinkAtMouseCursor,
    },
}

-- keyboard shortcuts --
config.keys = {
  {
    key = 'd',
    mods = 'CMD',
    action = act.SplitHorizontal { domain = 'CurrentPaneDomain' },
  },
  {
    key = 'd',
    mods = 'CMD|CTRL',
    action = act.SplitHorizontal { domain = 'CurrentPaneDomain', args = { 'wezterm cli split-pane --left' } },
  },
  {
    key = 'd',
    mods = 'CMD|SHIFT',
    action = act.SplitVertical { domain = 'CurrentPaneDomain' },
  },
  {
    key = 'w',
    mods = 'CMD',
    action = act.CloseCurrentPane { confirm = true },
  },
  {
    key = 'LeftArrow',
    mods = 'OPT',
    action = act { SendString = "\x1bb" },
  },
  {
    key = 'RightArrow',
    mods = 'OPT',
    action = act { SendString = "\x1bf" },
  },
  {
    key = 'LeftArrow',
    mods = 'CMD',
    action = act { SendString = "\x1bOH" },
  },
  {
    key = 'RightArrow',
    mods = 'CMD',
    action = act { SendString = "\x1bOF" },
  },
  {
    key = '[',
    mods = 'CMD',
    action = act.ActivatePaneDirection 'Next',
  },
  {
    key = 'LeftArrow',
    mods = 'CMD|ALT',
    action = act.ActivateTabRelative(-1),
  },
  {
    key = 'RightArrow',
    mods = 'CMD|ALT',
    action = act.ActivateTabRelative(1),
  },
}

-- Debugging --
-- config.debug_key_events = true

-- and finally, return the configuration to wezterm --
return config
